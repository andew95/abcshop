package db_test

import (
	"abcShop/configs"
	"abcShop/db"
	"abcShop/models"
	"math/rand/v2"
	"testing"
	"time"

	"github.com/google/uuid"
)

func TestNewConnection(t *testing.T) {
	productName := time.Now().Format(time.ANSIC)
	conf := configs.GetConfigTest()
	type given struct {
		user     string
		password string
		dbName   string
	}
	type when struct{}
	// expected
	type then struct {
		// db *gorm.DB
		// err error
	}
	tests := []struct {
		name  string
		given given
		when  when
		then  then
	}{
		{
			name: "success",
			given: given{
				user:     conf.DbConfig.User,
				password: conf.DbConfig.Password,
				dbName:   conf.DbConfig.DbName,
			},
		},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			db := db.NewSqlConnection(test.given.user, test.given.password, test.given.dbName)
			// if test.then.db != nil {
			if db != nil {
				product := &models.Product{
					Id:          uuid.New(),
					Code:        productName,
					Name:        "TestSqlConnection",
					Description: "Generated by Go Test",
					Category:    "Test",
					Tags:        []string{"test"},
					Status:      0,
					Amount:      rand.Int(),
					Price:       rand.Float64(),
					CreatedBy:   uuid.New(),
					CreatedAt:   time.Now(),
				}
				db.Debug().Create(&product)
			}
			// }
		})
	}
}
